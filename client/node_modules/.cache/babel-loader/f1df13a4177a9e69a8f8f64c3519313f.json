{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js\";\n// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button, Modal, ModalHeader, ModalBody, Form } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; // connect the product store to the react component\n\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport { createGuest, loadGuest } from '../actions/guestActions';\nimport { addGuestItem } from '../actions/guestItemActions';\nimport CheckoutModal from './CheckoutModal';\nvar sectionStyle = {\n  backgroundImage: 'url(https://wallpaperaccess.com/full/866025.jpg)',\n  backgroundSize: 'percentage',\n  height: '200px'\n};\n\nclass ProductsList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      userID: '',\n      guest: ''\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.openModal = (itemName, id) => {\n      this.setState({\n        name: itemName,\n        userID: id\n      }); // If the user is not logged in\n\n      if (this.props.user == null) {\n        // If the guest added his/her first item to the shopping cart\n        // then create the guest\n        if (this.props.guest.guest == null) {\n          this.props.createGuest(); //this.state.guest = this.props.createGuest();\n        } else {\n          this.props.loadGuest();\n        }\n      }\n\n      this.toggle();\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault(); // If the user is logged in \n\n      if (this.props.user != null) {\n        const newItem = {\n          name: this.state.name,\n          userID: this.props.user._id\n        }; // Add item via addItem action\n\n        this.props.addItem(newItem);\n      } // If not, continue as guest\n      else {\n          //this.props.loadGuest();\n          const newItem = {\n            name: this.state.name,\n            userID: this.props.guest.guest.guest._id\n          };\n          console.log(newItem);\n          this.props.addGuestItem(newItem);\n        } // Close Modal\n\n\n      this.toggle();\n    };\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  } // Here we define the actual product component we want to render to the UI\n\n\n  render() {\n    const {\n      products\n    } = this.props.products;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ProductsList\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TransitionGroup, {\n      className: \"products-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, products.map(({\n      productID,\n      name\n    }) => /*#__PURE__*/React.createElement(CSSTransition, {\n      key: productID,\n      timeout: 500,\n      classNames: \"fade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      color: \"dark\",\n      style: sectionStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"addToCart-btn\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: this.openModal.bind(productID, name),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, name), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 23\n      }\n    }, \" Add \", this.state.name, \" to Shopping Cart?\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"yes\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: e => this.onSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, \"YES\"))))))))));\n  }\n\n} // Mapping the desired redux states(stores) from index.js to this component\n\n\nProductsList.propTypes = {\n  getProducts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  products: state.product,\n  // property: index reducer\n  user: state.auth.user,\n  // property: index reducer\n  guest: state.guest\n}); // Connect the Store to this component\n\n\nexport default connect(mapStateToProps, {\n  getProducts,\n  addItem,\n  createGuest,\n  addGuestItem,\n  loadGuest\n})(ProductsList);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","Modal","ModalHeader","ModalBody","Form","CSSTransition","TransitionGroup","connect","getProducts","PropTypes","addItem","createGuest","loadGuest","addGuestItem","CheckoutModal","sectionStyle","backgroundImage","backgroundSize","height","ProductsList","state","modal","name","userID","guest","toggle","setState","openModal","itemName","id","props","user","onSubmit","event","preventDefault","newItem","_id","console","log","componentDidMount","render","products","map","productID","bind","e","propTypes","func","isRequired","mapStateToProps","product","auth"],"mappings":"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","sourcesContent":["// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form\n} from 'reactstrap';\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group';\n\nimport { connect } from 'react-redux'; // connect the product store to the react component\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport { createGuest, loadGuest } from '../actions/guestActions';\nimport { addGuestItem } from '../actions/guestItemActions';\nimport CheckoutModal from './CheckoutModal';\n\nvar sectionStyle = {\n  backgroundImage: 'url(https://wallpaperaccess.com/full/866025.jpg)',\n  backgroundSize: 'percentage',\n  height: '200px'\n}\n\n\nclass ProductsList extends Component {\n  // State of the component\n  state = {\n    modal: false,\n    name: '',\n    userID: '',\n    guest: ''\n  }\n\n  // prop-types to document the intended types of properties passed to components\n  static propTypes = {\n    getProducts: PropTypes.func.isRequired,\n  };\n\n  // Toggle the modal to open and close\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  openModal = (itemName, id) => {\n    this.setState({\n      name: itemName,\n      userID: id\n    });\n\n    // If the user is not logged in\n    if (this.props.user == null) {\n      // If the guest added his/her first item to the shopping cart\n      // then create the guest\n      if (this.props.guest.guest == null) {\n\n        this.props.createGuest()\n\n        //this.state.guest = this.props.createGuest();\n      }\n      else {\n        this.props.loadGuest();\n      }\n    }\n\n    this.toggle();\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n\n\n    // If the user is logged in \n    if (this.props.user != null) {\n      const newItem = {\n        name: this.state.name,\n        userID: this.props.user._id\n      }\n\n      // Add item via addItem action\n      this.props.addItem(newItem);\n    }\n    // If not, continue as guest\n    else {\n      //this.props.loadGuest();\n      const newItem = {\n        name: this.state.name,\n        userID: this.props.guest.guest.guest._id\n      }\n      console.log(newItem);\n\n      this.props.addGuestItem(newItem);\n    }\n\n    // Close Modal\n    this.toggle();\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  }\n\n  // Here we define the actual product component we want to render to the UI\n  render() {\n    const { products } = this.props.products;\n\n    return (\n      <div className=\"ProductsList\">\n        <Container>\n          <ListGroup>\n            <TransitionGroup className=\"products-list\">\n              {products.map(({ productID, name }) => (\n                <CSSTransition key={productID} timeout={500} classNames=\"fade\">\n                  <ListGroupItem color='dark' style={sectionStyle}>\n                    <Button\n                      className=\"addToCart-btn\"\n                      color=\"dark\"\n                      size=\"sm\"\n                      onClick={this.openModal.bind(productID, name)}>\n                      {name}\n                    </Button>\n                    <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                      <ModalHeader toggle={this.toggle}> Add {this.state.name} to Shopping Cart?</ModalHeader>\n                      <ModalBody>\n                        <Button\n                          className=\"yes\"\n                          color=\"dark\"\n                          size=\"sm\"\n                          onClick={(e) => this.onSubmit(e)}>\n                          YES\n                        </Button>\n                      </ModalBody>\n                    </Modal>\n                  </ListGroupItem>\n                </CSSTransition>\n              ))}\n            </TransitionGroup>\n          </ListGroup>\n        </Container>\n      </div>\n    );\n  }\n}\n\n// Mapping the desired redux states(stores) from index.js to this component\nconst mapStateToProps = (state) => ({\n  products: state.product,                 // property: index reducer\n  user: state.auth.user,                    // property: index reducer\n  guest: state.guest\n});\n\n// Connect the Store to this component\nexport default connect(mapStateToProps, { getProducts, addItem, createGuest, addGuestItem, loadGuest })(ProductsList);"]},"metadata":{},"sourceType":"module"}