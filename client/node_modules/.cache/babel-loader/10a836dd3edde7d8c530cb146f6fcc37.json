{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/auth/RegisterModal.js\";\n// React component to register users \nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap'; //Container = component that's hooked to redux\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nconst SmartyStreetsSDK = require(\"smartystreets-javascript-sdk\");\n\nconst SmartyStreetsCore = SmartyStreetsSDK.core;\nconst Lookup = SmartyStreetsSDK.usAutocomplete.Lookup;\nlet websiteKey = \"18911612130131961\";\nconst credentials = new SmartyStreetsCore.SharedCredentials(websiteKey);\nlet client = SmartyStreetsCore.buildClient.usAutocomplete(credentials);\nlet solidAddress = true;\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      // represents if the modal is open or not\n      name: '',\n      email: '',\n      password: '',\n      streetAddress: '',\n      cityAddress: '',\n      stateAddress: '',\n      zipCode: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      // Clear Errors\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      // whatever was added to add item on UI\n      this.setState({\n        [e.target.name]: e.target.value\n      }); // e.target.name get's name from line 68, which comes from input to UI\n    };\n\n    this.onSubmit = e => {\n      // get input from UI button\n      e.preventDefault(); // prevent form actually submitting\n\n      if (solidAddress) {\n        const {\n          name,\n          email,\n          password,\n          streetAddress,\n          cityAddress,\n          stateAddress,\n          zipCode\n        } = this.state; // Create user object\n\n        const newUser = {\n          name,\n          email,\n          password,\n          streetAddress,\n          cityAddress,\n          stateAddress,\n          zipCode\n        }; // Attempt to register\n\n        this.props.register(newUser);\n      } else {\n        this.forceUpdate();\n      }\n    };\n  }\n\n  //is invoked immediately after updating occurs. This method is not called for the initial render\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (this.state.cityAddress) {\n      if (this.state.streetAddress) {\n        let lookup = new Lookup(this.state.streetAddress + \", \" + this.state.cityAddress);\n        client.send(lookup).then(handleSuccess).catch(handleError);\n\n        async function handleSuccess(response) {\n          response.result.length != 0 ? solidAddress = true : solidAddress = false;\n        }\n\n        async function handleError(response) {\n          console.log(response);\n          solidAddress = false;\n        }\n\n        if (error != prevProps.error) {\n          // Check for register error\n          if (error.id == 'REGISTER_FAIL') {\n            this.setState({\n              msg: error.msg.msg\n            });\n          } else {\n            this.setState({\n              msg: null\n            });\n          }\n        } // If the user is authenticated then close the modal\n\n\n        if (this.state.modal == true) {\n          if (isAuthenticated && solidAddress) {\n            this.toggle();\n          }\n        }\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, !solidAddress ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 30\n      }\n    }, this.state.streetAddres, \" Not A Valid Address\") : null, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 31\n      }\n    }, this.state.msg) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"pasword\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, \"Street Address\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"streetAddress\",\n      name: \"streetAddress\",\n      id: \"streetAddress\",\n      placeholder: \"streetAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, \"City Address\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"cityAddress\",\n      name: \"cityAddress\",\n      id: \"cityAddress\",\n      placeholder: \"cityAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, \"State Address\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"stateAddress\",\n      name: \"stateAddress\",\n      id: \"stateAddress\",\n      placeholder: \"stateAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, \"Zip Code\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"zipCode\",\n      name: \"zipCode\",\n      id: \"zipCode\",\n      placeholder: \"zipCode\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, \"Register\"))))));\n  }\n\n}\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","clearErrors","SmartyStreetsSDK","require","SmartyStreetsCore","core","Lookup","usAutocomplete","websiteKey","credentials","SharedCredentials","client","buildClient","solidAddress","RegisterModal","state","modal","name","email","password","streetAddress","cityAddress","stateAddress","zipCode","msg","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","forceUpdate","componentDidUpdate","prevProps","error","isAuthenticated","lookup","send","then","handleSuccess","catch","handleError","response","result","length","console","log","id","render","streetAddres","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["// React component to register users \nimport React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  NavLink,\n  Alert\n} from 'reactstrap';\n\n//Container = component that's hooked to redux\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nconst SmartyStreetsSDK = require(\"smartystreets-javascript-sdk\");\nconst SmartyStreetsCore = SmartyStreetsSDK.core;\nconst Lookup = SmartyStreetsSDK.usAutocomplete.Lookup;\n\nlet websiteKey = \"18911612130131961\";\nconst credentials = new SmartyStreetsCore.SharedCredentials(websiteKey);\n\nlet client = SmartyStreetsCore.buildClient.usAutocomplete(credentials);\n\nlet solidAddress = true;\n\nclass RegisterModal extends Component {\n  // state of the component\n  state = {\n    modal: false,                  // represents if the modal is open or not\n    name: '',\n    email: '',\n    password: '',\n    streetAddress: '',\n    cityAddress: '',\n    stateAddress: '',\n    zipCode: '',\n    msg: null\n  };\n\n  // prop-types to document the intended types of properties passed to component\n  static propTypes = {\n    isAuthenticated: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    register: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n  }\n\n  //is invoked immediately after updating occurs. This method is not called for the initial render\n  componentDidUpdate(prevProps) {\n    const { error, isAuthenticated } = this.props\n\n    if (this.state.cityAddress) {\n      if (this.state.streetAddress) {\n        let lookup = new Lookup(this.state.streetAddress + \", \" + this.state.cityAddress);\n\n        client.send(lookup)\n          .then(handleSuccess)\n          .catch(handleError);\n\n        async function handleSuccess(response) {\n          response.result.length != 0 ?\n            solidAddress = true : solidAddress = false;\n        }\n\n        async function handleError(response) {\n          console.log(response);\n          solidAddress = false;\n        }\n\n        if (error != prevProps.error) {\n          // Check for register error\n          if (error.id == 'REGISTER_FAIL') {\n            this.setState({ msg: error.msg.msg });\n          } else {\n            this.setState({ msg: null });\n          }\n        }\n        // If the user is authenticated then close the modal\n        if (this.state.modal == true) {\n          if (isAuthenticated && solidAddress) {\n            this.toggle();\n          }\n        }\n      }\n\n    }\n  }\n\n  toggle = () => {\n    // Clear Errors\n    this.props.clearErrors();\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  onChange = (e) => {                           // whatever was added to add item on UI\n    this.setState({ [e.target.name]: e.target.value }); // e.target.name get's name from line 68, which comes from input to UI\n  }\n\n  onSubmit = e => {                         // get input from UI button\n    e.preventDefault();                    // prevent form actually submitting\n    if (solidAddress) {\n      const { name, email, password, streetAddress, cityAddress, stateAddress, zipCode } = this.state;\n\n      // Create user object\n      const newUser = {\n        name,\n        email,\n        password,\n        streetAddress,\n        cityAddress,\n        stateAddress,\n        zipCode,\n      };\n\n      // Attempt to register\n      this.props.register(newUser);\n    }\n    else {\n      this.forceUpdate();\n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        <NavLink onClick={this.toggle} href=\"#\">\n          Register\n        </NavLink>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n        >\n          <ModalHeader toggle={this.toggle}>Register</ModalHeader>\n          <ModalBody>\n            {!solidAddress ? <Alert color=\"danger\">{this.state.streetAddres} Not A Valid Address</Alert> : null}\n            {this.state.msg ? <Alert color=\"danger\">{this.state.msg}</Alert> : null}\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Name\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                >\n\n                </Input>\n                <Label for=\"name\">Email</Label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  placeholder=\"Email\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                >\n                </Input>\n\n                <Label for=\"name\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"pasword\"\n                  placeholder=\"Password\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                >\n                </Input>\n\n                <Label for=\"name\">Street Address</Label>\n                <Input\n                  type=\"streetAddress\"\n                  name=\"streetAddress\"\n                  id=\"streetAddress\"\n                  placeholder=\"streetAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Label for=\"name\">City Address</Label>\n                <Input\n                  type=\"cityAddress\"\n                  name=\"cityAddress\"\n                  id=\"cityAddress\"\n                  placeholder=\"cityAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Label for=\"name\">State Address</Label>\n                <Input\n                  type=\"stateAddress\"\n                  name=\"stateAddress\"\n                  id=\"stateAddress\"\n                  placeholder=\"stateAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Label for=\"name\">Zip Code</Label>\n                <Input\n                  type=\"zipCode\"\n                  name=\"zipCode\"\n                  id=\"zipCode\"\n                  placeholder=\"zipCode\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Button\n                  color=\"dark\"\n                  style={{ marginTop: '2rem' }}\n                  block\n                >\n                  Register\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, { register, clearErrors })(RegisterModal);"]},"metadata":{},"sourceType":"module"}