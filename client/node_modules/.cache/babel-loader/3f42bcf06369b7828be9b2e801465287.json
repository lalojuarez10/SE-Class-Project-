{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js\";\n// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button, Modal, ModalHeader, ModalBody, Form } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; // connect the product store to the react component\n\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport { createGuest } from '../actions/guestActions';\nimport { addGuestItem } from '../actions/guestItemActions';\nimport CheckoutModal from './CheckoutModal';\n\nclass ProductsList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      userID: ''\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.openModal = (itemName, id) => {\n      this.setState({\n        name: itemName,\n        userID: id\n      });\n      this.toggle();\n    };\n\n    this.onSubmit = event => {\n      event.preventDefault(); // If the user is logged in \n\n      if (this.state.user != null) {\n        const newItem = {\n          name: this.state.name,\n          userID: this.props.user._id\n        }; // Add item via addItem action\n\n        this.props.addItem(newItem);\n      } // If not, continue as guest\n      else {\n          // If the guest added his/her first item to the shopping cart then create the guest\n          if (this.props.guest.guest == null) {\n            this.props.createGuest();\n          }\n\n          const newItem = {\n            name: this.state.name,\n            userID: '274'\n          };\n          this.props.addGuestItem(newItem);\n        } // Close Modal\n\n\n      this.toggle();\n    };\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  } // Here we define the actual product component we want to render to the UI\n\n\n  render() {\n    const {\n      products\n    } = this.props.products;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      className: \"products-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, products.map(({\n      productID,\n      name\n    }) => React.createElement(CSSTransition, {\n      key: productID,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"addToCart-btn\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: this.openModal.bind(productID, name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, name), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" Add \", this.state.name, \" to Shopping Cart?\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"yes\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: e => this.onSubmit(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"YES\")))))))));\n  }\n\n} // Mapping the desired redux states(stores) from index.js to this component\n\n\nProductsList.propTypes = {\n  getProducts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  products: state.product,\n  // property: index reducer\n  user: state.auth.user,\n  // property: index reducer\n  guest: state.guest\n}); // Connect the Store to this component\n\n\nexport default connect(mapStateToProps, {\n  getProducts,\n  addItem,\n  createGuest,\n  addGuestItem\n})(ProductsList);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","Modal","ModalHeader","ModalBody","Form","CSSTransition","TransitionGroup","connect","getProducts","PropTypes","addItem","createGuest","addGuestItem","CheckoutModal","ProductsList","state","modal","name","userID","toggle","setState","openModal","itemName","id","onSubmit","event","preventDefault","user","newItem","props","_id","guest","componentDidMount","render","products","map","productID","bind","e","propTypes","func","isRequired","mapStateToProps","product","auth"],"mappings":"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","sourcesContent":["// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form\n} from 'reactstrap';\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group';\n\nimport { connect } from 'react-redux'; // connect the product store to the react component\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport { createGuest } from '../actions/guestActions';\nimport { addGuestItem } from '../actions/guestItemActions';\nimport CheckoutModal from './CheckoutModal';\n\n\nclass ProductsList extends Component {\n  // State of the component\n  state = {\n    modal: false,\n    name: '',\n    userID: ''\n  }\n\n  // prop-types to document the intended types of properties passed to components\n  static propTypes = {\n    getProducts: PropTypes.func.isRequired,\n  };\n\n  // Toggle the modal to open and close\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  openModal = (itemName, id) => {\n    this.setState({\n      name: itemName,\n      userID: id\n    });\n\n    this.toggle();\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault();\n\n    // If the user is logged in \n    if (this.state.user != null) {\n      const newItem = {\n        name: this.state.name,\n        userID: this.props.user._id\n      }\n\n      // Add item via addItem action\n      this.props.addItem(newItem);\n    }\n    // If not, continue as guest\n    else {\n      // If the guest added his/her first item to the shopping cart then create the guest\n      if (this.props.guest.guest == null) {\n        this.props.createGuest();\n      }\n\n      const newItem = {\n        name: this.state.name,\n        userID: '274'\n      }\n\n      this.props.addGuestItem(newItem);\n    }\n\n    // Close Modal\n    this.toggle();\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  }\n\n  // Here we define the actual product component we want to render to the UI\n  render() {\n    const { products } = this.props.products;\n\n    return (\n      <Container>\n        <ListGroup>\n          <TransitionGroup className=\"products-list\">\n            {products.map(({ productID, name }) => (\n              <CSSTransition key={productID} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  <Button\n                    className=\"addToCart-btn\"\n                    color=\"dark\"\n                    size=\"sm\"\n                    onClick={this.openModal.bind(productID, name)}>\n                    {name}\n                  </Button>\n                  <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}> Add {this.state.name} to Shopping Cart?</ModalHeader>\n                    <ModalBody>\n                      <Button\n                        className=\"yes\"\n                        color=\"dark\"\n                        size=\"sm\"\n                        onClick={(e) => this.onSubmit(e)}>\n                        YES\n                        </Button>\n                    </ModalBody>\n                  </Modal>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\n// Mapping the desired redux states(stores) from index.js to this component\nconst mapStateToProps = (state) => ({\n  products: state.product,                 // property: index reducer\n  user: state.auth.user,                    // property: index reducer\n  guest: state.guest\n});\n\n// Connect the Store to this component\nexport default connect(mapStateToProps, { getProducts, addItem, createGuest, addGuestItem })(ProductsList);"]},"metadata":{},"sourceType":"module"}