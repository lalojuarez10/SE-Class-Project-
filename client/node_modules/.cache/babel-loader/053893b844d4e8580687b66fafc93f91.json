{"ast":null,"code":"// Guest Reducer = Guest Store\n// Holds the state\nimport { GUEST_LOADING, GUEST_LOADED, GUEST_SUCCESS } from \"../actions/types\"; // This is the store, holds information of the guest\n\nconst intialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  isLoading: false,\n  // if the guest is still being loaded from backend\n  guest: null // the guest itself\n\n};\nexport default function (state = intialState, action) {\n  switch (action.type) {\n    case GUEST_LOADING:\n      // Point of getting the guest from the backend\n      return { ...state,\n        // current state\n        isLoading: true\n      };\n\n    case GUEST_LOADED:\n      // used for every request => has to be continous because how JWT works = stateless\n      return { ...state,\n        // current state\n        isAuthenticated: true,\n        // we validate the guest based on the token\n        isLoading: false,\n        guest: action.payload // we send the guest in the payload\n\n      };\n\n    case GUEST_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        // here, we get the guest and token from the backend\n        isLoading: false,\n        guest: action.payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/reducers/guestReducer.js"],"names":["GUEST_LOADING","GUEST_LOADED","GUEST_SUCCESS","intialState","token","localStorage","getItem","isAuthenticated","isLoading","guest","state","action","type","payload","setItem"],"mappings":"AAAA;AACA;AACA,SACEA,aADF,EAEEC,YAFF,EAGEC,aAHF,QAIO,kBAJP,C,CAMA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADW;AAElBC,EAAAA,eAAe,EAAE,IAFC;AAGlBC,EAAAA,SAAS,EAAE,KAHO;AAGY;AAC9BC,EAAAA,KAAK,EAAE,IAJW,CAIY;;AAJZ,CAApB;AAOA,eAAe,UAAUC,KAAK,GAAGP,WAAlB,EAA+BQ,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,aAAL;AAAgC;AAC9B,aAAO,EACL,GAAGU,KADE;AACuB;AAC5BF,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAKF,SAAKP,YAAL;AAA+B;AAC7B,aAAO,EACL,GAAGS,KADE;AACsB;AAC3BH,QAAAA,eAAe,EAAE,IAFZ;AAEsB;AAC3BC,QAAAA,SAAS,EAAE,KAHN;AAILC,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAJT,CAIsB;;AAJtB,OAAP;;AAOF,SAAKX,aAAL;AACEG,MAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACE,OAAP,CAAeT,KAA7C;AACA,aAAO,EACL,GAAGM,KADE;AAEL,WAAGC,MAAM,CAACE,OAFL;AAEsB;AAC3BL,QAAAA,SAAS,EAAE,KAHN;AAILC,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAJT,OAAP;;AAOF;AACE,aAAOH,KAAP;AAzBJ;AA2BD","sourcesContent":["// Guest Reducer = Guest Store\n// Holds the state\nimport {\n  GUEST_LOADING,\n  GUEST_LOADED,\n  GUEST_SUCCESS\n} from \"../actions/types\";\n\n// This is the store, holds information of the guest\nconst intialState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: null,\n  isLoading: false,             // if the guest is still being loaded from backend\n  guest: null                   // the guest itself\n}\n\nexport default function (state = intialState, action) {\n  switch (action.type) {\n    case GUEST_LOADING:             // Point of getting the guest from the backend\n      return {\n        ...state,                   // current state\n        isLoading: true\n      };\n\n    case GUEST_LOADED:             // used for every request => has to be continous because how JWT works = stateless\n      return {\n        ...state,                  // current state\n        isAuthenticated: true,     // we validate the guest based on the token\n        isLoading: false,\n        guest: action.payload      // we send the guest in the payload\n      };\n\n    case GUEST_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return {\n        ...state,\n        ...action.payload,         // here, we get the guest and token from the backend\n        isLoading: false,\n        guest: action.payload\n      };\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}