{"ast":null,"code":"import axios from 'axios';\nimport { GUEST_LOADING, GUEST_LOADED, GUEST_SUCCESS } from \"./types\"; // We want to check the token, then fetch the user\n\nexport const loadGuest = () => (dispatch, getState) => {\n  // Call the gues reducer and tell him we are fetching the guest\n  dispatch({\n    type: GUEST_LOADING\n  }); // Load the guest from the backend\n\n  axios.get('/api/guests/user', tokenConfig(getState)).then(guest => dispatch({\n    type: GUEST_LOADED,\n    // tell the reducer the guest is loaded \n    payload: guest.data // store the guest & token in the reducer store\n\n  }));\n};\nexport const tokenConfig = getState => {\n  // Get the token from the state in guest reducer\n  const token = getState().guest.token; // We create a headers, just like postman -> Axios = talk to our backend\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // If there's a token, add the token to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token; // add the token that's in local storage/ guest reducer\n  }\n\n  return config;\n};\nexport const createGuest = () => dispatch => {\n  axios.post('/api/guests').then(guest => dispatch({\n    type: GUEST_SUCCESS,\n    payload: guest.data\n  }));\n};","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/actions/guestActions.js"],"names":["axios","GUEST_LOADING","GUEST_LOADED","GUEST_SUCCESS","loadGuest","dispatch","getState","type","get","tokenConfig","then","guest","payload","data","token","config","headers","createGuest","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,aAHF,QAIO,SAJP,C,CAMA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACrD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR,CAFqD,CAIrD;;AACAD,EAAAA,KAAK,CAACQ,GAAN,CAAU,kBAAV,EAA8BC,WAAW,CAACH,QAAD,CAAzC,EACGI,IADH,CACQC,KAAK,IAAIN,QAAQ,CAAC;AACtBE,IAAAA,IAAI,EAAEL,YADgB;AACY;AAClCU,IAAAA,OAAO,EAAED,KAAK,CAACE,IAFO,CAEW;;AAFX,GAAD,CADzB;AAKD,CAVM;AAYP,OAAO,MAAMJ,WAAW,GAAIH,QAAD,IAAc;AACvC;AACA,QAAMQ,KAAK,GAAGR,QAAQ,GAAGK,KAAX,CAAiBG,KAA/B,CAFuC,CAIvC;;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CALuC,CAWvC;;AACA,MAAIF,KAAJ,EAAW;AACTC,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCF,KAAjC,CADS,CACmC;AAC7C;;AAED,SAAOC,MAAP;AACD,CAjBM;AAmBP,OAAO,MAAME,WAAW,GAAG,MAAOZ,QAAD,IAAc;AAC7CL,EAAAA,KAAK,CAACkB,IAAN,CAAW,aAAX,EACGR,IADH,CACQC,KAAK,IAAIN,QAAQ,CAAC;AACtBE,IAAAA,IAAI,EAAEJ,aADgB;AAEtBS,IAAAA,OAAO,EAAED,KAAK,CAACE;AAFO,GAAD,CADzB;AAKD,CANM","sourcesContent":["import axios from 'axios';\nimport {\n  GUEST_LOADING,\n  GUEST_LOADED,\n  GUEST_SUCCESS\n} from \"./types\";\n\n// We want to check the token, then fetch the user\nexport const loadGuest = () => (dispatch, getState) => {\n  // Call the gues reducer and tell him we are fetching the guest\n  dispatch({ type: GUEST_LOADING });\n\n  // Load the guest from the backend\n  axios.get('/api/guests/user', tokenConfig(getState))\n    .then(guest => dispatch({\n      type: GUEST_LOADED,               // tell the reducer the guest is loaded \n      payload: guest.data              // store the guest & token in the reducer store\n    }));\n}\n\nexport const tokenConfig = (getState) => {\n  // Get the token from the state in guest reducer\n  const token = getState().guest.token;\n\n  // We create a headers, just like postman -> Axios = talk to our backend\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }\n\n  // If there's a token, add the token to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;     // add the token that's in local storage/ guest reducer\n  }\n\n  return config;\n}\n\nexport const createGuest = () => (dispatch) => {\n  axios.post('/api/guests')\n    .then(guest => dispatch({\n      type: GUEST_SUCCESS,\n      payload: guest.data\n    }));\n} "]},"metadata":{},"sourceType":"module"}